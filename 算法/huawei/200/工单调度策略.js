// 题目描述
// 当小区通信设备上报警时，系统会自动生成待处理的工单，华为工单调度系统需要根据不同的策略，调度外线工程师( FME)上站修复工单对应的问题。
// 根据与运营商签订的合同，不同严重程度的工单被处理并修复的时长要求不同，这个要求被修复的时长我们称之为SLA时间。
// 假设华为和运营商A签订了运维合同，部署了一套调度系统，只有1个外线工程师（FME)，每个工单根据问题严重程度会给一个评分，在SLA时间内完成修复的工单，华为获得工单评分对应的积分，超过SLA完成的工单不获得积分，但必须完成该工单。运营商最终会根据积分进行付款。
// 请设计一种调度策略，根据现状得到调度结果完成所有工单，让这个外线工程师处理的工单获得的总积分最多。假设从某个调度时刻开始，当前工单数量为N，不会产生新的工单，每个工单处理修复耗时为1小时，请设计你的调度策略,完成业务目标。
// 不考虑外线工程师在小区之间行驶的耗时。输入描述
// 第一行为一个整数N，表示工单的数量。
// 接下来N行，每行包括两个整数。第一个整数表示工单的SLA时间(小时)，第二个数表示该工单的积分。输出描述
// 输出一个整数表示可以获得的最大积分。备注
// ·工单数量N≤10^6. SLA时间≤7*10^5
// ·答案的最大积分不会超过2147483647
// 用例
// 假设有7个工单的SLA时间(小时)和积分如下:

const fn = (arr) => {
  let len = arr.length;
  let dp = new Array(len).fill(0);

  arr.sort((a, b) => b[1] - a[1]);

  console.log(arr);
  for (let temp of arr) {
    let i = temp[0] - 1;
    while (i >= 0 && dp[i] !== 0) {
      i--;
    }
    if (i >= 0) {
      dp[i] = temp[1];
    }
  }
  console.log(dp);
  return dp.reduce((a, b) => a + b);
};

console.log(
  fn([
    [1, 6],
    [1, 7],
    [3, 2],
    [3, 1],
    [2, 4],
    [2, 5],
    [6, 1],
  ])
);
