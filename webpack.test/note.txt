
 webpack 0配置方式打包
 webpack-cli 可以解析用户传递的参数


 执行方式：
 npx 执行。bin下的webpack文件来执行
 两个模式，开发模式；生产模式


npm run scripts 里面可以配置对应的命令

默认配置文件 webpack.config.js

通过 --config 来指定执行的配置文件是哪个


webpack-merge 主要用来合并模块

如果是开发环境，利用webpack-dev-server

自动生产html并引入打包好的js

先解析css再解析图片，js，react+vue

解析css需要 css-loader和style-loader

前者解析css语法；后者将解析的css语法变成style标签插入到页面中

loader的执行顺序，默认是从下往上，从右往左执行

css预处理器： node-sass  sass-loader
            less less-loader
            stylus stylus-loader

postcss 添加前缀；// browserslistrc用于autoprefixer读取，自动添加前缀

js // es6 -> es5 装饰器；类属性

@babel/core （默认调用 转化代码）
@babel/preset-env  （主要用来转化的插件）
@babel-loader (babel和webpack的桥梁）

babelrc 从下往上执行

babelrc 中的 loose
loose 是 true 时候，使用defineProperty；是false时候 使用this.a


{
  "presets": [
    ["@babel/preset-env",{
    }
    // 按需加载api 会自动转化 并且按需加载 （includes）
      "useBuiltIns": "usage",
    // babel-polyfill
      "corejs": 2
    }]
  ],
  "plugins": [
  // 解析装饰器
    ["@babel/plugin-proposal-decorators",{"legacy": true}],
  // 解析类的属性
    ["@babel/plugin-proposal-class-properties",{"loose": true}]
  ]
}

// @babel/plugin-transform-runtime
可以节约代码
// @babel/runtime 配套使用 方式对引入的js重复转化
















